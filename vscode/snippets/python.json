{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"pprint": {
		"prefix": "pprint",
		"body": [
			"from pprint import pprint",
			"print()",
			"pprint($1)",
			"print()"
		],
		"description": "pprint"
	},
	"here": {
		"prefix": "here",
		"body": [
			"print()",
			"print('HERE')",
			"print()"
		],
		"description": "print here"
	},
	"three prints": {
		"prefix": "p3",
		"body": [
			"print()",
			"print($1)",
			"print()"
			"$2"
		],
		"description": "three prints"
	},
	"five prints": {
		"prefix": "p5",
		"body": [
			"print()",
			"print()",
			"print($1)",
			"print()",
			"print()"
		],
		"description": "three prints"
	},
	"print here": {
		"prefix": "ph",
		"body": [
			"print('HERE $1')",
		],
		"description": "print here"
	},
	"print exception traceback": {
		"prefix": "trb",
		"body": [
			"import traceback",
			"traceback.print_exc()"
		],
		"description": "print exception traceback"
	},
	"print - 80": {
		"prefix": "p80",
		"body": [
			"print('-' * 80)",
			"$1",
			"print('-' * 80)",
		],
		"description": "print - 80 times"
	},
	"print sql query": {
		"prefix": "sqlqueryprint",
		"body": [
			"from sqlalchemy.dialects import postgresql",
			"print()",
    		"print($1.compile(dialect=postgresql.dialect()))",
			"print()",
		],
		"description": "print sql query"
	},
	"async main": {
		"prefix": "asyncmain",
		"body": [
			"import asyncio",
			"",
			"",
			"async def main():",
			"    $1",
			"",
			"",
			"if __name__ == \"__main__\":",
			"	asyncio.run(main())",
		],
		"description": "Async main"
	}
}
